
// flip an array of records into a record of arrays

class FlipType a b | a -> b
instance FlipType () ()
instance (a={lbl:h*it}, FlipType it ot, {lbl:[h]*ot}=b) => FlipType a b

class FlipInto a b where
  flipInto :: ([a],b) -> ()

// [doc] converts from an array of records into a record of arrays
// [eg]  [{a:int, b:bool}] -> {a:[int], b:[bool]}
flip :: (FlipType a b) => [a] -> b
flip xs = let r = newPrim(); _ = flipInto(xs, r) in r

instance (a={lbl:h*()}, b={lbl:[h]*()}) => FlipInto a b where
  flipInto xs y = recordHeadValue(y) <- map(recordHeadValue, xs)

instance (a={lbl:h*at}, b={lbl:[h]*bt}, FlipInto at bt) => FlipInto a b where
  flipInto xs y = let _ = (recordHeadValue(y) <- map(recordHeadValue, xs)) in flipInto(unsafeCast(xs) :: [at], recordTail(y))

